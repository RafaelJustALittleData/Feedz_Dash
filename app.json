[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(shinydashboard)\n# Define UI for application that draws a histogram\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(plotly)\n#library(shinydashboardPlus)\nlibrary(visNetwork)\n\n\n\n#titulo<-dashboardHeader(title = \"Analise Resultado Feedz\",titleWidth = 450)\ntitulo=dashboardHeader()\n\ntitulo$children[[2]]$children <-  tags$a(href='http://just.bi',\n                                         tags$img(src='logo.png',height='40',width='200'))\n\n\nmenu<- dashboardSidebar(width = 250,\n                        tags$style(type=\"text/css\",\n                                   \".shiny-output-error { visibility: hidden; }\",\n                                   \".shiny-output-error:before { visibility: hidden; }\"\n                        ),\n                        sidebarMenu(id=\"Tab\",\n                                    menuItem(\"Tabela\", tabName = \"Tabela\", icon = icon(\"dashboard\")),\n                                    menuItem(\"Visao Individuo\", tabName = \"VisaoIndividuo\", icon = icon(\"dashboard\")),\n                                    menuItem(\"Visao Time\",tabName=\"VisaoTime\",icon=icon(\"dashboard\")),\n                                    menuItem(\"Visao Temporal\",tabName=\"VisaoTemporal\",icon=icon(\"dashboard\")),\n                                    \n                                    menuItem('Wordclouds',tabName = 'Wordclouds',icon=icon('dashboard')),\n                                    menuItem('Coocorrencia de termos',tabName = 'Grafo',icon=icon('dashboard')),\n                                    menuItem(\"Visao de Gestor\", tabName = \"Segmentacao\", icon = icon(\"dashboard\")),\n                                    menuItem(\"Sobre\", tabName = \"Sobre\", icon = icon(\"th\")),\n                                    \n                                    uiOutput('Gerador_Seletor_Pessoas'),\n                                    selectInput('Seletor_Agrupador','Selecione se usaremos agrupador de valores ou não',choices=c('Sim','Nao'))\n                        )\n                        \n                        \n                        \n)\n\n\n\n## Body content\ncorpo<- dashboardBody(\n  fileInput('Entrada',label='Incluir dados de avaliação aqui'),\n  \n  dataTableOutput('Correlacao'),\n  \n  \n  tabItems(\n    # First tab content\n    tabItem(tabName = \"Tabela\",\n            fluidRow(\n              dataTableOutput(\"Tabela\")\n              \n              \n            )\n    ),\n    \n    tabItem(tabName = \"VisaoIndividuo\",\n            fluidRow(\n              plotOutput('Visao_Comparativa')\n              \n              \n            )\n    ),\n    \n    tabItem(tabName = \"VisaoTime\",\n            fluidRow(\n              #plotOutput('Visao_Global')\n              box(plotOutput('Visao_AutoAvaliacao')),\n              box(plotOutput('Visao_Gestor')),\n              box(plotOutput('Visao_Outros')),\n              box(plotOutput('Visao_Media'))\n              \n            )\n    ),\n    \n    tabItem(tabName = \"VisaoTemporal\",\n            fluidRow(\n              plotlyOutput('Temporal')\n              \n              \n            )\n    ),\n    \n    tabItem(tabName = \"Wordclouds\",\n            fluidRow(\n              plotOutput('WordCloud')\n              \n              \n            )\n    ),\n    \n    tabItem(tabName = \"Grafo\",\n            fluidRow(\n              numericInput('OcorrenciaMinima',label = 'Minima quantidade de vezes que uma palavra ocorre',value = 2,min=1,max=1000),\n              #plotOutput('Grafo'))\n              visNetworkOutput('Grafo_Dinamico'))\n            \n            \n    ),\n\n\n    tabItem(tabName = \"Segmentacao\",\n            fluidRow(\n                            selectInput('Tipo_Nota_Segmentacao','Tipo de nota para segmentação',choices=c('Autoavaliacao','Gestor.direto','Outros.Avaliadores','Media.Final')),\n                            plotlyOutput('Segmentacao_Time')\n              \n              \n            )\n    ),\n\n    \n  \n  tabItem(tabName = \"Sobre\",\n          fluidRow(\n            uiOutput('GeradorSobre')\n            \n            \n          )\n  )\n  ),\n\n      \n\n  \n  \n  \n  \n  \n  \n  \n  \n)\n\n\n\n\n\n\nui <- dashboardPage(titulo,menu,corpo,skin=\"black\",title = \"Analise Resultado Feedz\")\n# Define server logic required to draw a histogram\nrequire(shiny)\nsource('Funcoes_Base.R')\nrequire(plotly)\nrequire(ggthemes)\n\n\nrequire(tidyr)\nrequire(dplyr)\nrequire(lubridate)\n\nserver <- function(input, output) {\n  #Funções reativas\n  #_________________________________________________________________________________________  \n  \n  \n  leitura_old_legada<-reactive({\n    file <- input$Entrada\n    ext <- tools::file_ext(file$datapath)\n    \n    req(file)\n    validate(need(ext == \"csv\", \"Formato de arquivo errado\"))\n    \n    \n    df=read.csv(file$datapath,encoding = 'UTF-8')\n    names(df)[1:3]=c('Competencia','Descricao','Autoavaliacao')\n    df=df %>% mutate(Media_Ajustada=(Gestor.direto*0.5 + Outros.Avaliadores*0.2)/0.7 )\n    \n    \n    return(df)\n  })\n  \n  leitura_old<-reactive({\n    file <- input$Entrada\n    ext <- tools::file_ext(file$datapath)\n    \n    req(file)\n    validate(need(ext == \"csv\", \"Formato de arquivo errado\"))\n    \n    \n    df=read.csv(file$datapath,encoding = 'UTF-8')\n    #names(df)[1:3]=c('Competencia','Descricao','Autoavaliacao')\n    \n    df=df %>%  mutate(\n      Data.da.resposta=dmy(Data.da.resposta),\n      month = month(Data.da.resposta),\n      year = year(Data.da.resposta),\n      data=dmy(paste0('01-0',month,'-',year))\n    ) \n\n    #df1=df[,c('Competência','Tipo.de.Avaliador','Nota','Feedback','Data.da.resposta','Avaliador')]\n    Comentarios=df %>% select(Competência,Avaliador,Feedback,Avaliado=Nome,data) %>% pivot_wider(id_cols=c('Competência','Avaliado','data'),values_from='Feedback',names_from = 'Avaliador') \n    \n    dim(Comentarios)[2]\n    names(Comentarios)[4:dim(Comentarios)[2]]=paste0('Avaliador.',1:(dim(Comentarios)[2]-3) )\n    #head(Comentarios)\n    \n    Notas=df %>% group_by(Competência,Tipo.de.Avaliador,Avaliado=Nome,data) %>% summarize(Nota=mean(Nota)) %>% pivot_wider(id_cols=c('Competência','Avaliado','data'),values_from='Nota',names_from = 'Tipo.de.Avaliador')\n    #head(Notas)\n    \n    Result=Notas %>% inner_join(Comentarios) %>%\n      rename(Outros.Avaliadores=`Avaliação do avaliador/par`,Gestor.direto=`Avaliação do gestor`,Competencia=Competência,Autoavaliacao=Autoavaliação) %>%\n      mutate(Media.Final=0.3*Autoavaliacao + 0.5*Gestor.direto + 0.2*Outros.Avaliadores\n      )\n    # Para os casos que os outros não opinão\n    Logico=is.na(Result[,c('Outros.Avaliadores')] )\n    if(sum(Logico)>0){\n      Result[Logico,'Media.Final']= (0.5 * Result[Logico,'Gestor.direto'] + 0.3 * Result[Logico,'Autoavaliacao'] )/0.8 \n    }\n    \n    Logico=is.na(Result[,c('Autoavaliacao')] ) | Result[,c('Autoavaliacao')]==0\n    if(sum(Logico)>0){\n      Result[Logico,'Media.Final']= (0.5 * Result[Logico,'Gestor.direto'] )/0.5\n      Result[Logico,'Autoavaliacao']=NA\n    }\n    \n    df=Result\n    print(df)\n    \n    \n    return(df)\n  })\n\n\n  \n  \n  leitura<-reactive({\n    df = leitura_old()\n    df=df %>% filter(data==max(data)) #%>% select(-data)\n    return(df)\n  })\n  \n  \n  leitura_Valores=reactive({\n    \n    df=leitura()\n    aux=Dicionario()\n    df=df %>% inner_join(aux) %>% group_by(Dict,Avaliado) %>% \n      summarize(Autoavaliacao=mean(Autoavaliacao),Gestor.direto=mean(Gestor.direto),Outros.Avaliadores=mean(Outros.Avaliadores),Media.Final=mean(Media.Final)) %>% mutate(Competencia=Dict) %>% ungroup() %>% select(-Dict)\n    df=df %>% mutate(Media_Ajustada=(Gestor.direto*0.5 + Outros.Avaliadores*0.2)/0.7 )\n    \n    Logico=is.na(df[,c('Outros.Avaliadores')] )\n    if(sum(Logico)>0){\n      df[Logico,'Media_Ajustada']= df[Logico,'Gestor.direto']  \n    }\n    \n    return(df)\n  })\n  \n  \n  leitura_Valores_old=reactive({\n    \n    df=leitura_old()\n    aux=Dicionario()\n    df=df %>% inner_join(aux) %>% group_by(Dict,Avaliado,data) %>% \n      summarize(Autoavaliacao=mean(Autoavaliacao),Gestor.direto=mean(Gestor.direto),Outros.Avaliadores=mean(Outros.Avaliadores),Media.Final=mean(Media.Final)) %>% mutate(Competencia=Dict) %>% ungroup() %>% select(-Dict)\n    df=df %>% mutate(Media_Ajustada=(Gestor.direto*0.5 + Outros.Avaliadores*0.2)/0.7 )\n    Logico=is.na(df[,c('Outros.Avaliadores')] )\n    if(sum(Logico)>0){\n      df[Logico,'Media_Ajustada']= df[Logico,'Gestor.direto']  \n    }\n    \n    return(df)\n  })\n  \n  \n  tdm<-reactive({\n    \n    df=leitura()\n    \n    Colaborador=input$Seletor_Pessoas\n    df=df %>% filter(Avaliado==Colaborador)\n    Matriz=Gerar_Matriz_Termo_Documento(df,Colaborador)\n    return(Matriz)\n  })\n\n  \n    \n  \n  \n  \n  #Funcoes geradoras de UI\n  #_______________________________________________________________________________\n  \n  output$Gerador_Seletor_Pessoas<- renderUI({\n    \n    arquivo=leitura_old()\n    if(!is.null(arquivo)){\n      Pessoas=unique(arquivo$Avaliado)\n      selectInput('Seletor_Pessoas','Selecione as pessoa que quer observar os resultados',choices=Pessoas)\n    }\n  })\n  \n  output$GeradorSobre<-renderUI({\n    \n    if(input$Tab==\"Sobre\"){\n      h4('Desenvolvido pelo time de Data Science\\n Para mais detalhes ou expansão, abrir tarefa no clickup e comunicar o lider atual')\n      \n      \n    }\n  })\n  \n  #Funcoes que geram telas\n  #__________________________________________________________________________________________\n  output$Visao_Comparativa<-renderPlot({\n    \n    \n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores()\n    }else{\n      df=leitura()\n    }\n    #df=df[,-which(names(df)==\"Media.Final\")] #%>% select(-data)\n    #if ('data' %in% names(df))\n    #  df=df %>% select(-data)\n    Colaborador=input$Seletor_Pessoas\n    #Gerar_Visual_Deia(df,Colaborador)\n    #print(names(df))\n    df=df %>% select(Avaliado,Autoavaliacao,Gestor.direto,Outros.Avaliadores,Competencia)\n    p<-Gerar_Visual_Comparativo(df,Colaborador)\n    p\n    #ggplotly(p)\n  })\n  \n  output$Visao_Global<-renderPlot({\n    \n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores()\n    }else{\n      df=leitura()\n    }\n    \n    #df=df[,-which(names(df)==\"Media.Final\")]\n    Colaborador=input$Seletor_Pessoas\n    p<-Gerar_Visual_Deia(df,Colaborador)\n    #p<-Gerar_Visual_Comparativo(df,Colaborador)\n    p\n    #ggplotly(p)\n  })\n  \n  output$Visao_AutoAvaliacao<-renderPlot({\n    \n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores()\n    }else{\n      df=leitura()\n    }\n    \n    #df=df[,-which(names(df)==\"Media.Final\")]\n    Colaborador=input$Seletor_Pessoas\n    p<-Gerar_Visual_Deia_Lista(df,Colaborador)\n    #p<-Gerar_Visual_Comparativo(df,Colaborador)\n    p$AutoAvaliacao\n    #ggplotly(p)\n  })\n  \n  output$Visao_Gestor<-renderPlot({\n    \n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores()\n    }else{\n      df=leitura()\n    }\n    \n    #df=df[,-which(names(df)==\"Media.Final\")]\n    Colaborador=input$Seletor_Pessoas\n    p<-Gerar_Visual_Deia_Lista(df,Colaborador)\n    #p<-Gerar_Visual_Comparativo(df,Colaborador)\n    p$Gestor\n    #ggplotly(p)\n  })\n  \n  output$Visao_Outros<-renderPlot({\n    \n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores()\n    }else{\n      df=leitura()\n    }\n    \n    #df=df[,-which(names(df)==\"Media.Final\")]\n    Colaborador=input$Seletor_Pessoas\n    p<-Gerar_Visual_Deia_Lista(df,Colaborador)\n    #p<-Gerar_Visual_Comparativo(df,Colaborador)\n    p$Outros\n    #ggplotly(p)\n  })\n  \n  output$Visao_Media<-renderPlot({\n    \n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores()\n    }else{\n      df=leitura()\n    }\n    \n    #df=df[,-which(names(df)==\"Media.Final\")]\n    Colaborador=input$Seletor_Pessoas\n    p<-Gerar_Visual_Deia_Lista(df,Colaborador)\n    #p<-Gerar_Visual_Comparativo(df,Colaborador)\n    p$Media\n    #ggplotly(p)\n  })\n  \n  \n  output$Tabela<-renderDataTable({\n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores()\n    }else{\n      df=leitura()\n    }\n    Colaborador=input$Seletor_Pessoas\n    #datatable(, options = list(scrollX = TRUE))\n    x=df %>% filter(Avaliado==Colaborador)\n    x\n  })\n  \n  output$Correlacao<-renderDataTable({\n    if(input$Tab==\"Tabela\"){\n      if(input$Seletor_Agrupador==\"Sim\"){\n        df=leitura_Valores()\n      }else{\n        df=leitura()\n      }\n      Colaborador=input$Seletor_Pessoas\n      df=df %>% filter(Avaliado==Colaborador)\n      df$Autoavaliacao=(df$Autoavaliacao<=3.5 & df$Autoavaliacao>=3.0 )*1 + (df$Autoavaliacao>3.5)*2#(df$Autoavaliacao==3)*1 + (df$Autoavaliacao>3)*2\n      df$Gestor.direto=(df$Gestor.direto<=3.5 & df$Gestor.direto>=3.0 )*1 + (df$Gestor.direto>3.5)*2#(df$Gestor.direto==3)*1 + (df$Gestor.direto>3)*2\n      df$Outros.Avaliadores=(df$Outros.Avaliadores<=3.5 & df$Outros.Avaliadores>=3.0 )*1 + (df$Outros.Avaliadores>3.5)*2\n      lista=list(Origem=c('Autoavaliacao','Autoavaliacao','Gestor'),Destino=c('Gestor','Outros','Outros'),Score=c(mean(df$Autoavaliacao==df$Gestor.direto,na.rm=TRUE),mean(df$Autoavaliacao==df$Outros.Avaliadores,na.rm=TRUE),mean(df$Outros.Avaliadores==df$Gestor.direto,na.rm=TRUE)  ) )\n      \n      return(data.frame(lista))\n      #Matriz=cor(df[,c('Autoavaliacao','Gestor.direto','Outros.Avaliadores')],method='pearson') %>% melt() %>% filter(Var1!=Var2)\n      #Matriz=Matriz[!duplicated(Matriz$value),]\n      #names(Matriz)[3]='pearson'\n      #Matriz\n    }\n  })\n  \n  output$WordCloud<-renderPlot({\n    Matriz=tdm()\n    Frequencia=Gerar_WordCloud(Matriz)\n    print(Frequencia)\n    require(wordcloud)\n    #print(data.frame(word=names(Frequencia),Contagem=as.numeric(Frequencia)) %>% inner_join(parts_of_speech) )\n    \n    wordcloud(names(Frequencia),as.numeric(Frequencia)) \n  })\n  \n  output$Grafo<-renderPlot({\n    Matriz=tdm()\n    Matriz=t(Matriz)\n    Grafo=Gerar_Grafo(Matriz,input$OcorrenciaMinima)\n    plot(Grafo)\n  })\n  \n  output$Grafo_Dinamico<-renderVisNetwork({\n    Matriz=tdm()\n    Matriz=t(Matriz)\n    Grafo=Gerar_Grafo(Matriz,input$OcorrenciaMinima)\n    visIgraph(Grafo)\n    \n  })\n  \n  output$Temporal<-renderPlotly({\n    #renderPlotly({\n    if(input$Seletor_Agrupador==\"Sim\"){\n      df=leitura_Valores_old()\n    }else{\n      df=leitura_old()\n    }\n    require(reshape2)\n    Colaborador=input$Seletor_Pessoas\n    df=df %>% filter(Avaliado==Colaborador)\n    df=df %>% ungroup()\n    df=df %>% select(Competencia,data,Outros.Avaliadores,Gestor.direto,Media.Final)\n    df = df %>% melt(id=c('data','Competencia') )\n    print(df)\n    require(lubridate)\n    p<-ggplot(df) + aes(x=data,y=value,colour=Competencia) + geom_line() + facet_wrap(~variable) + labs(x='Data de referencia') + ylim(1,5) + geom_point()\n    ggplotly(p)\n    \n  })\n\n  output$Segmentacao_Time<-renderPlotly({\n        \n      if(input$Seletor_Agrupador==\"Sim\"){\n        df=leitura_Valores()\n      }else{\n        df=leitura()\n      }\n      Segmentacao=input$Tipo_Nota_Segmentacao\n      #print(df)\n      #Resultado=df %>% select(Media.Final,Avaliado,Competencia)\n      Resultado=df[,c('Avaliado','Competencia',Segmentacao)]\n      Resultado=Resultado[complete.cases(Resultado),]\n      print(Resultado)\n      #Resultado=Resultado %>% pivot_wider(id_cols='Avaliado',values_from='Media.Final',names_from='Competencia')\n      Resultado=Resultado %>% pivot_wider(id_cols='Avaliado',values_from=Segmentacao,names_from='Competencia')\n      print(Resultado)\n      PCA=prcomp(Resultado[,-1],scale=TRUE)\n      sdev <- PCA$sdev\n      variance_explained_manual <- (sdev^2) / sum(sdev^2)\n      variance_first_two_manual <- sum(variance_explained_manual[1:2])\n      pca_data=as.data.frame(PCA$x)\n      loadings <- as.data.frame(PCA$rotation)\n      pca_data[,'Avaliado']=Resultado[,1]\n\n      p <- ggplot(pca_data, aes(x = PC1, y = PC2)) +\n      geom_text(size = 3,aes(label = Avaliado)) +\n      geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 5, yend = PC2 * 5), \n               arrow = arrow(length = unit(0.2, \"cm\")), color = \"red\") +\n      geom_text(data = loadings, aes(x = PC1 * 5, y = PC2 * 5, label = rownames(loadings)), \n            color = \"red\", vjust = 1, hjust = 1,position = position_jitter(width = 0.3, height = 0.3)) +\n      theme_minimal() +\n      labs(title = \"PCA do time\",\n         x = paste0(\"First Principal Component: \",variance_explained_manual[1] *100,'%'),\n         y = paste0(\"Second Principal Component: \",variance_explained_manual[2] *100,'%'),subtitle=paste('Percentual de variabilide explicada é de ',variance_first_two_manual))\n\n      ggplotly(p)\n\n  })\n  \n  \n  \n  \n}\n# Run the application \nshinyApp(ui = ui, server = server)","type":"text"},{"name":"Funcoes_Base.R","content":"require(dplyr)\nrequire(reshape2)\nrequire(ggplot2)\n\n\nDicionario<-function(){\n  require(dplyr)\n  Core=list(data.frame('Competencia'='Inquietude','Dict'='Valores'),\n            data.frame('Competencia'='Conhecimento profundo do que faz','Dict'='Valores'),\n            data.frame('Competencia'='Foco na solução','Dict'='Valores'),\n            data.frame('Competencia'='Transparência','Dict'='Valores'),\n            data.frame('Competencia'='Assertividade','Dict'='Valores'),\n            \n            data.frame('Competencia'='Ownership','Dict'='Empredimento'),\n            data.frame('Competencia'='Resolver / Fazer','Dict'='Empredimento'),\n            \n            data.frame('Competencia'='Gestão do Tempo','Dict'='Disponibilidade'),\n            data.frame('Competencia'='Pontualidade','Dict'='Disponibilidade'),\n            data.frame('Competencia'='Acessibilidade','Dict'='Disponibilidade'),\n            \n            data.frame('Competencia'='Relacionamento interpessoal com outras áreas','Dict'='Colaboração'),\n            data.frame('Competencia'='Relacionamento interpessoal com o time','Dict'='Colaboração'),\n            data.frame('Competencia'='Comunicação','Dict'='Colaboração'),\n            data.frame('Competencia'='Prontidão','Dict'='Colaboração'),\n            \n            data.frame('Competencia'='Domínio do Workspace','Dict'='Hard Skills'),\n            data.frame('Competencia'='Domínio de Ferramentas / Softwares','Dict'='Hard Skills'),\n            \n            data.frame('Competencia'='Inteligência emocional','Dict'='Postura'),\n            data.frame('Competencia'='Maturidade profissional','Dict'='Postura'),\n            \n            data.frame('Competencia'='Potencial','Dict'='Performance'),\n            data.frame('Competencia'='Desempenho','Dict'='Performance')\n  ) %>% bind_rows()\n  \n  Encoding(Core$Competencia) <-'UTF-8'\n  return(Core)\n  \n}\n\n\n\n\nGerar_Visual_Deia<-function(df,Colaborador){\n  require(reshape2)\n  require(ggplot2)\n  require(ggthemes)\n  \n  \n  require(dplyr)\n  Core_Comparacao = df %>% \n    filter(Avaliado!=Colaborador) %>% group_by(Competencia) %>% \n    summarize(Autoavaliacao=mean(Autoavaliacao),\tGestor=mean(Gestor.direto)\t,Outros=mean(Outros.Avaliadores)\t,Media=mean(Media.Final)\t) %>%\n    mutate(Avaliado=\"Referencia\") %>%\n    rbind( df %>% filter(Avaliado==Colaborador) %>% select(Avaliado,Competencia,Autoavaliacao,Gestor=Gestor.direto,Outros=Outros.Avaliadores,Media=Media.Final)  )\n  \n  \n  Grafico<-Core_Comparacao %>% melt() %>%\n    ggplot(aes(x=Competencia, y=value)) +\n    geom_line(aes(col = Avaliado,group=Avaliado)) + geom_point(aes(col=Avaliado)) + coord_polar()+ geom_hline(yintercept = 3) + ylim(0,5) +\n    theme_excel_new() + labs(x='Nota',y='') + scale_fill_manual(values = c( \"red\", \"blue\",'white')) + facet_wrap(~variable)\n\n  return(Grafico)\n}\n\n\n\nGerar_Visual_Deia_Lista<-function(df,Colaborador){\n  require(reshape2)\n  require(ggplot2)\n  require(ggthemes)\n  \n  \n  require(dplyr)\n  Core_Comparacao = df %>% \n    filter(Avaliado!=Colaborador) %>% group_by(Competencia) %>% \n    summarize(Autoavaliacao=mean(Autoavaliacao),\tGestor=mean(Gestor.direto)\t,Outros=mean(Outros.Avaliadores)\t,Media=mean(Media.Final)\t) %>%\n    mutate(Avaliado=\"Referencia\") %>%\n    rbind( df %>% filter(Avaliado==Colaborador) %>% select(Avaliado,Competencia,Autoavaliacao,Gestor=Gestor.direto,Outros=Outros.Avaliadores,Media=Media.Final)  )\n  \n  \n  AutoAvaliacao<-Core_Comparacao %>% melt() %>% filter(variable=='Autoavaliacao') %>%\n    ggplot(aes(x=Competencia, y=value)) +\n    geom_line(aes(col = Avaliado,group=Avaliado)) + geom_point(aes(col=Avaliado)) + coord_polar()+ geom_hline(yintercept = 3) + ylim(0,5) +\n    theme_excel_new() + labs(x='Nota',y='') + scale_fill_manual(values = c( \"red\", \"blue\",'white')) + facet_wrap(~variable)\n  \n  \n  Gestor<-Core_Comparacao %>% melt() %>% filter(variable=='Gestor') %>%\n    ggplot(aes(x=Competencia, y=value)) +\n    geom_line(aes(col = Avaliado,group=Avaliado)) + geom_point(aes(col=Avaliado)) + coord_polar()+ geom_hline(yintercept = 3) + ylim(0,5) +\n    theme_excel_new() + labs(x='Nota',y='') + scale_fill_manual(values = c( \"red\", \"blue\",'white')) + facet_wrap(~variable)\n  \n  \n  Outros<-Core_Comparacao %>% melt() %>% filter(variable=='Outros') %>%\n    ggplot(aes(x=Competencia, y=value)) +\n    geom_line(aes(col = Avaliado,group=Avaliado)) + geom_point(aes(col=Avaliado)) + coord_polar()+ geom_hline(yintercept = 3) + ylim(0,5) +\n    theme_excel_new() + labs(x='Nota',y='') + scale_fill_manual(values = c( \"red\", \"blue\",'white')) + facet_wrap(~variable)\n  \n  \n  \n  Media<-Core_Comparacao %>% melt() %>% filter(variable=='Media') %>%\n    ggplot(aes(x=Competencia, y=value)) +\n    geom_line(aes(col = Avaliado,group=Avaliado)) + geom_point(aes(col=Avaliado)) + coord_polar()+ geom_hline(yintercept = 3) + ylim(0,5) +\n    theme_excel_new() + labs(x='Nota',y='') + scale_fill_manual(values = c( \"red\", \"blue\",'white')) + facet_wrap(~variable) \n  \n  Grafico=list(AutoAvaliacao,Gestor,Outros,Media)\n  names(Grafico)=c('AutoAvaliacao','Gestor','Outros','Media')\n  \n  return(Grafico)\n}\n\n\n\n\nGerar_Visual_Comparativo<-function(df,Colaborador){\n  require(reshape2)\n  require(ggplot2)\n  require(ggthemes)\n  Grafico=df %>% \n    filter(Avaliado==Colaborador) %>% melt() %>%\n    ggplot(aes(x=Competencia, y=value)) +\n    geom_line(aes(col = variable,group=variable)) + geom_point(aes(col=variable)) + coord_polar()+ geom_hline(yintercept = 3) + ylim(0,5) +\n    theme_excel_new() + labs(x='Nota',y='') \n  return(Grafico)\n}\n\n\n\nGerar_Matriz_Termo_Documento<-function(df,Colaborador){\n  require(tm) \n  require(tidyr)\n  Avaliacoes=df %>% \n    filter(Avaliado==Colaborador) %>%\n    select(starts_with('Avaliador')) %>% gather() %>%\n    select(Avaliador=value) %>% mutate(Avaliador=removeNumbers(Avaliador),\n                                       Avaliador=tolower(Avaliador),\n                                       Avaliador=removeWords(Avaliador,stopwords('pt')),\n                                       Avaliador=removePunctuation(Avaliador) )\n  Matriz=TermDocumentMatrix(Corpus(VectorSource(Avaliacoes$Avaliador)) )\n  return(Matriz)\n  \n}\n\n\nGerar_WordCloud<-function(Matriz){\n  require(wordcloud)\n  Frequencia=rowSums(as.matrix(Matriz) )\n  return(Frequencia)\n  #return(wordcloud(names(Frequencia),as.numeric(Frequencia)) )\n\n}\n\nGerar_Grafo<-function(Matriz,Corte){\n  \n  Adjacencia=as.matrix(t(Matriz)) %*% as.matrix(Matriz)\n  \n  Lista=melt(1*(Adjacencia>=Corte)) \n  \n  names(Lista)=c('Origem','Destino','Valor')\n  Lista=Lista %>% filter(Valor>0,Origem!=Destino)\n  \n  require(igraph)\n  Grafo=graph_from_data_frame(Lista)\n  return(Grafo)\n}","type":"text"},{"name":"Funcoes_Geradoras_UI.R","content":"require(shiny)\n\noutput$Gerador_Seletor_Pessoas<- renderUI({\n  \n  arquivo=leitura()\n  #if(!is.null(arquivo)){\n    Pessoas=unique(arquivo$Avaliado)\n    selectInput('Seletor_Pessoas','Selecione as pessoa que quer observar os resultados',choices=Pessoas)\n  #}\n})","type":"text"},{"name":"Funcoes_Reativas.R","content":"require(shiny)\n\nleitura<-reactive({\n  if(!is.null(input$Entrada$datapath) ){\n    \n    dataset=read.csv(input$Entrada$datapath)\n    return(dataset)\n  }\n  return(NA)\n  \n  \n  \n})\n\nleitura<-reactive({\nfile <- input$Entrada\next <- tools::file_ext(file$datapath)\n\nreq(file)\nvalidate(need(ext == \"csv\", \"Formato de arquivo errado\"))\n\nreturn(read.csv(file$datapath))\n})","type":"text"},{"name":"README.md","content":"# Feedz_Dash\nPublicacao para disponibilizar o dashboard de analise do feez\n","type":"text"},{"name":"www/logo.png","content":"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\nRK5CYII=","type":"binary"}]
